(*****************************************************************
parties : â€™a list -> â€™a list list
argument: l, une liste quelconque dâ€™Ã©lÃ©ments
rÃ©sultat: une liste de listes, dont les 2^(List.length l) Ã©lÃ©ments
sont les sous-listes de l. Si les Ã©lements de l sont
diffÃ©rents, les listes Ã©lÃ©ments du rÃ©sultat seront
diffÃ©rentes aussi, et formeront les parties de l.
*****************************************************************)

(* Exercice 1: Donner une formulation rÃ©cursive comptant le nombre de parties dâ€™un ensemble de cardinal n  *)

(* nombre_de_partie(e) = 2*nombre_de_partie(tete) (=2^n)*)
let rec nombre_de_partie e =
  match e with 
    | [] -> 1
    | queue::tete -> 2*nombre_de_partie(tete)

let%test _ = nombre_de_partie [] = 1
let%test _ = nombre_de_partie [1;2;3] = 8


(* Exercice 2: â€” Ã‰crire la fonction ajout, qui Ã  partir dâ€™un Ã©lÃ©ment e et dâ€™ensembles {E1, . . . , En} renvoie lâ€™ensemble
{E1, {e} âˆª E1, . . . , En, {e} âˆª En}. *)

let ajout e e_multiple = e_multiple @ (List.map (fun e_simple -> e::e_simple) e_multiple)

let rec parties e_simple = 
  match e_simple with
    | [] -> [[]]
    | queue::tete -> ajout queue (parties tete)


(* 2 Permutations dâ€™une liste *)

(* ****************************************************************
permutations : â€™a list -> â€™a list list
argument: l, une liste quelconque dâ€™Ã©lÃ©ments
rÃ©sultat: une liste de listes, dont les (List.length l)! Ã©lÃ©ments
ont mÃªme longueur que l. Si les Ã©lements de l sont
diffÃ©rents, les listes Ã©lÃ©ments du rÃ©sultat seront
diffÃ©rentes aussi, et formeront les permutations de l.
**************************************************************** *)

let rec insertion e l = match l with
  | [] -> [[e]]
  | [r] -> [[e;r]; [r;e]] (*pas forcement utile !*)
  | t::q -> (e::l)::List.map(fun ll->t::ll)(insertion e q)



let rec permutations l = match l with
  | [] -> []
  | [r] -> [[r]]
  | t::q -> List.flatten(List.map(fun ll -> insertion t ll)(permutations q))
(*C'est n'importe quoi ðŸ˜…*)

(* 3 Combinaisons *)

(* ****************************************************************
combinaisons : â€™a list -> int -> â€™a list list
argument: l, une liste quelconque dâ€™Ã©lÃ©ments supposÃ©s diffÃ©rents
k, le nombre dâ€™Ã©lements distincts Ã  tirer
rÃ©sultat: une liste de combinaisons. Chaque combinaison est elle-mÃªme
une liste dâ€™Ã©lÃ©ments, dont les Ã©lÃ©ments
sont ceux de l.
**************************************************************** *)

(* Donner une formulation rÃ©cursive comptant le nombre de combinaisons de k Ã©lÃ©ments dâ€™un
ensemble Ã  n Ã©lÃ©ments. *)

(* nbr_combinaison(n, k) == nbr_combinaison(n-1, k) * nbr_combinaison(n-1, k-1) *)

(* Ã‰crire la fonction combinaisons (contrat+code+test) *)

let rec combinaison ensemble k = 
  let n = List.length ensemble in
    match k with
      | 0 -> [[]]
      | n -> [ensemble]
      | _ -> match ensemble with
        | [] -> [[]]
        | tete::queue -> (combinaison queue k) @ (ajout tete (combinaison queue (k-1)))